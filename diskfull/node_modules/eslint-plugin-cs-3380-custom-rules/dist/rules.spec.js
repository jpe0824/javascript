"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const eslint_1 = require("eslint");
const rules_1 = require("./rules");
const DISALLOWED_IDENTIFIER_STARTERS = "^(my|abstract|arguments|await|boolean|break|byte|case|catch|char|class|const|continue|debugger|default|delete|do|double|else|enum|eval|export|extends|false|final|finally|float|for|function|goto|if|implements|import|in|instanceof|int|interface|let|long|native|new|null|package|private|protected|public|return|short|static|super|switch|synchronized|this|throw|throws|transient|true|try|typeof|var|void|volatile|while|with|yield)";
const DISALLOWED_IDENTIFIER_STARTERS_FLAGS = "i";
const DISALLOWED_IDENTIFIER_STARTERS_OPTIONS = [DISALLOWED_IDENTIFIER_STARTERS, DISALLOWED_IDENTIFIER_STARTERS_FLAGS];
const ruleTester = new eslint_1.RuleTester({
    parserOptions: {
        "ecmaVersion": "latest"
    },
});
ruleTester.run('disallowed-identifier-pattern', rules_1.regexIdentifierRestrictionsRule, {
    valid: [
        {
            code: 'const x = 3;',
            options: DISALLOWED_IDENTIFIER_STARTERS_OPTIONS
        },
        {
            code: 'function asdfFunc() {}',
            options: DISALLOWED_IDENTIFIER_STARTERS_OPTIONS
        },
        {
            code: "module.exports = 3",
            options: DISALLOWED_IDENTIFIER_STARTERS_OPTIONS
        },
        {
            code: "Boolean(3);",
            options: DISALLOWED_IDENTIFIER_STARTERS_OPTIONS
        },
        {
            code: "class A { constructor() {} }",
            options: DISALLOWED_IDENTIFIER_STARTERS_OPTIONS
        }
    ],
    invalid: [
        {
            code: 'const myVar = 3;',
            errors: 1,
            options: DISALLOWED_IDENTIFIER_STARTERS_OPTIONS
        },
        {
            code: 'function myFunc() {}',
            errors: 1,
            options: DISALLOWED_IDENTIFIER_STARTERS_OPTIONS
        },
        {
            code: 'class NewClass {}',
            errors: 1,
            options: DISALLOWED_IDENTIFIER_STARTERS_OPTIONS
        },
        {
            code: 'const myFunc = () => {}',
            errors: 1,
            options: DISALLOWED_IDENTIFIER_STARTERS_OPTIONS
        },
        {
            code: "class A { constructor() {} myMethod() {} }",
            errors: 1,
            options: DISALLOWED_IDENTIFIER_STARTERS_OPTIONS
        },
        {
            code: "class A { constructor() {} myMember = 3; }",
            errors: 1,
            options: DISALLOWED_IDENTIFIER_STARTERS_OPTIONS
        },
    ]
});
ruleTester.run('proper-quotes-usage', rules_1.properQuotesUseRule, {
    valid: [
        {
            code: '"<div></div>"',
        },
        {
            code: '"3<div></div>"',
        },
        {
            code: "`hello\ngoodbye`",
        },
        {
            code: "`he'llo`"
        },
        {
            code: '`he"llo`'
        },
        {
            code: '"\\n"'
        }
    ],
    invalid: [
        {
            code: "'<div></div>'",
            errors: 1,
        },
        {
            code: "'hello\\ngoodbye'",
            errors: 1,
        },
        {
            code: "'he\"llo'",
            errors: 1,
        },
        {
            code: "'he\\'llo'",
            errors: 1,
        }
    ]
});
//# sourceMappingURL=rules.spec.js.map