"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.properQuotesUseRule = exports.regexIdentifierRestrictionsRule = void 0;
exports.regexIdentifierRestrictionsRule = {
    meta: {
        type: "layout",
        docs: {
            description: "disallow variable names matching a regular expression",
            recommended: true
        },
        schema: [
            {
                type: "string",
            },
            {
                type: "string",
            }
        ]
    },
    create(context) {
        const regex = new RegExp(context.options[0], context.options[1]);
        const commonError = (node) => ({
            message: `identifier name cannot match ${regex}`,
            node
        });
        return {
            FunctionDeclaration: node => {
                if (regex.test(node.id.name)) {
                    context.report(commonError(node));
                }
            },
            VariableDeclarator: node => {
                if (regex.test(node.id.name ?? "")) {
                    context.report(commonError(node));
                }
            },
            ClassDeclaration: node => {
                if (regex.test(node.id.name ?? "")) {
                    context.report(commonError(node));
                }
            },
            MethodDefinition: node => {
                if (node.kind === "constructor")
                    return;
                if (regex.test(node.key.name ?? "")) {
                    context.report(commonError(node));
                }
            },
            PropertyDefinition: node => {
                if (regex.test(node.key.name)) {
                    context.report(commonError(node));
                }
            }
        };
    },
};
exports.properQuotesUseRule = {
    meta: {
        type: "layout",
        docs: {
            description: "enforces double quotes for HTML, backticks for multiline strings or enclosed single or double quotes, and single quotes for all other strings",
            recommended: true
        },
    },
    create(context) {
        return {
            Literal: (node) => {
                if (typeof node.value !== "string")
                    return;
                const quote = node.raw[0];
                // If is valid HTML, make sure it is enclosed with double quotes. 
                // If it is, just return early. 
                if (/<.*>.*<\/.*>/ig.test(node.value)) {
                    if (quote !== '"') {
                        context.report({
                            message: `HTML strings must be enclosed with double quotes (")`,
                            node
                        });
                        return;
                    }
                    return;
                }
                // No escaped newlines that also contain string content
                const newLineRegex = /\\n/ig;
                if (newLineRegex.test(node.raw)) {
                    if (node.raw.replace(newLineRegex, '').length > 2) {
                        context.report({
                            message: `multiline strings must be enclosed with backticks (\`)`,
                            node
                        });
                        return;
                    }
                    return;
                }
                if (quote !== "`") {
                    // Enclosed single or double quotes
                    if (/'|"/ig.test(node.value)) {
                        context.report({
                            message: `strings containing single or double quotes must be enclosed with backticks (\`)`,
                            node
                        });
                        return;
                    }
                }
                // If we got here, the string passed the above checks.
                // Now make sure that it is enclosed in single quotes.
                if (quote !== "'") {
                    context.report({
                        message: `regular strings must be enclosed with single quotes (')`,
                        node
                    });
                }
            }
        };
    },
};
//# sourceMappingURL=rules.js.map