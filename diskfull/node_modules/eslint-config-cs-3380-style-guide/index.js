/* eslint-disable */

module.exports = {
    "parserOptions": {
        "ecmaVersion": "latest"
    },
    "plugins": [
        "@brettz9/eslint-plugin",
        "cs-3380-custom-rules"
    ],
    "rules": {
        // No var
        "no-var": "error",
        // No semicolons
        "semi": ["error", "never"],
        // Variable names? Done with custom rule.
        "cs-3380-custom-rules/bad-identifiers": ["error", "^(my|abstract|arguments|await|boolean|break|byte|case|catch|char|class|const|continue|debugger|default|delete|do|double|else|enum|eval|export|extends|false|final|finally|float|for|function|goto|if|implements|import|in|instanceof|int|interface|let|long|native|new|null|package|private|protected|public|return|short|static|super|switch|synchronized|this|throw|throws|transient|true|try|typeof|var|void|volatile|while|with|yield)", "i"],

        // Quotes? Done with custom rule and rules below.
        "prefer-template": "error", // No concatenation
        "no-multi-str": "error", // Multiline strings by escaping the newline character
        "no-unexpected-multiline": "error", // Not really with quotes but will enforce cleaner code
        "cs-3380-custom-rules/proper-string-quotes": "error",

        // Use literals to construct common types
        "no-new-object": "error",
        "prefer-regex-literals": "error",
        "no-array-constructor": "error",

        // Use camelCase for naming
        "camelcase": "error",

        // Brace style
        "brace-style": ["error", "1tbs"],

        // Guard clauses?

        // When in doubt, use parenthesis?

        // Do have function names touch the opening paren
        "space-before-function-paren": ["error", "never"],
        "func-call-spacing": ["error", "never"],

        // Testing should always be coded to pass? It is impossible to enforce this.

        // Avoid using intermediate variables on returns?

        // Tabs are exactly 2 spaces
        "indent": ["error", 2],

        // Fat Arrow Functions with One Parameter must be Consistent
        "arrow-parens": "error",

        // Better to split logical operations up to be more readable?
        // Prefer simple positive conditions when possible?

        // Don't use a for-i loops when map, filter, and foreach would work
        "@brettz9/prefer-for-of": "error"
    }
};